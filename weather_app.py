from datetime import datetime, timedelta

import openmeteo_requests
import requests_cache
from retry_requests import retry


async def fetch_weather(latitude=54.9924, longitude=73.368):
    base_url = "https://api.open-meteo.com/v1/forecast"
    params = {
        "latitude": latitude,
        "longitude": longitude,
        "current": ["temperature_2m", "relative_humidity_2m", "weather_code", "wind_speed_10m"],
        "hourly": ["temperature_2m", "apparent_temperature", "precipitation_probability", "precipitation", "rain",
                   "showers", "snowfall", "snow_depth", "weather_code", "visibility", "wind_gusts_10m"],
        "daily": ["weather_code", "temperature_2m_max", "temperature_2m_min", "precipitation_hours"],
        "timezone": "auto",
        "forecast_days": 1
    }
    cache_session = requests_cache.CachedSession('.cache', expire_after=3600)
    retry_session = retry(cache_session, retries=5, backoff_factor=0.2)
    openmeteo = openmeteo_requests.Client(session=retry_session)
    response = openmeteo.weather_api(base_url, params=params)[0]

    current = response.Current()
    current_temperature_2m = current.Variables(0).Value()
    current_relative_humidity_2m = current.Variables(1).Value()

    daily = response.Daily()
    daily_weather_code = daily.Variables(0).ValuesAsNumpy()[0]
    daily_temperature_2m_max = daily.Variables(1).ValuesAsNumpy()[0]
    daily_temperature_2m_min = daily.Variables(2).ValuesAsNumpy()[0]

    return (f"{get_greeting()}\n"
            f"ะกะตะนัะฐั ะฒ ะะผัะบะต {datetime.fromtimestamp(current.Time())}\n{int(current_temperature_2m)}ยฐC, "
            f"{get_index(daily_weather_code)}\n"
            f"ะะปะฐะถะฝะพััั ะฒะพะทะดััะฐ ัะพััะฐะฒะปัะตั {current_relative_humidity_2m}%\n"
            f"ะะฐะบัะธะผะฐะปัะฐั ัะตะผะฟะตัะฐัััะฐ ัะตะณะพะดะฝั ัะพััะฐะฒะธั {int(daily_temperature_2m_max)}ยฐC, "
            f"ะผะธะฝะธะผะฐะปัะฝะฐั {int(daily_temperature_2m_min)}ยฐC")


def get_index(weather_code) -> str:
    associations = {
        0: "ััะฝะพโ๏ธ", 1: "ะฟัะตะธะผััะตััะฒะตะฝะฝะพ ััะฝะพ๐ค", 2: "ะฟะตัะตะผะตะฝะฝะฐั ะพะฑะปะฐัะฝะพัััโ๏ธ", 3: "ะฟะฐัะผััะฝะพโ๏ธ",
        45: "ััะผะฐะฝ๐ซ", 48: "ะธะทะผะพัะพะทั", 51: "ะผะตะปะบะฐั ะผะพัะพัั๐ฆ", 53: "ะผะพัะพัััะธะน ะดะพะถะดั๐ฆ",
        55: "ะผะพัะพัััะธะน ะดะพะถะดั๐ฆ", 56: "ะผะพัะพัั ัะพ ะปัะดะพะผ๐จ", 57: "ะณัััะฐั ะผะพัะพัั ัะพ ะปัะดะพะผ๐จ",
        61: "ัะปะฐะฑัะน ะดะพะถะดั๐ง", 63: "ะดะพะถะดั๐จ. ะัะตะผั ะฝะฐัะปะฐะดะธัััั ะฟะพะณะพะดะพะนโบ๏ธ", 65: "ะดะพะถะดั๐จ",
        66: "ะดะพะถะดั ัะพ ะปัะดะพะผ๐ง", 67: "ะดะพะถะดั ัะพ ะปัะดะพะผ๐ง", 71: "ัะปะฐะฑัะน ัะฝะตะณะพะฟะฐะดโ๏ธ", 73: "ัะฝะตะณโ๏ธ",
        75: "ัะธะปัะฝัะน ัะฝะตะณะพะฟะฐะดโ๏ธ", 77: "ัะฝะตะณะพะฟะฐะดโ๏ธ", 80: "ัะปะฐะฑัะน ะปะธะฒะฝะตะฒัะน ะดะพะถะดัโ๏ธ",
        81: "ะปะธะฒะตะฝั๐จ", 82: "ะปะธะฒะตะฝั๐จ", 85: "ัะธะปัะฝัะน ัะฝะตะณะพะฟะฐะด!โ๏ธ ะฃัะฐ!", 86: "ัะธะปัะฝัะน ัะฝะตะณะพะฟะฐะด!โ๏ธ ะฃัะฐ!",
        95: "ัะผะตัะตะฝะฝะฐั ะณัะพะทะฐ๐ฉ", 96: "ะณัะพะทะฐโ", 97: "ะณัะพะทะฐโ"
    }
    return associations.get(weather_code, "ะะตะธะทะฒะตััะฝัะน ะบะพะด ะฟะพะณะพะดั")


def get_greeting():
    now = datetime.now() + timedelta(hours=1)
    if 4 < now.hour <= 12:
        return "๐ะะพะฑัะพะต ัััะพ!"
    elif 12 < now.hour <= 16:
        return "๐ะะพะฑััะน ะดะตะฝั!"
    elif 16 < now.hour <= 24:
        return "๐ะะพะฑััะน ะฒะตัะตั!"
    else:
        return "๐ะะพะฑัะพะน ะฝะพัะธ!"
